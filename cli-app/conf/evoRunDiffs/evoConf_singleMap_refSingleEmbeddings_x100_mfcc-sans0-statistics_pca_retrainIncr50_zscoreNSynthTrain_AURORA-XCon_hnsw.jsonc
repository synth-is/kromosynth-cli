{
  "seedEvals": 512,
  "batchSize": 64, // 625, // 0,0625 * 10000 (32/512)
  // "seedEvals": 64,
  // "batchSize": 16, // 625, // 0,0625 * 10000 (32/512)
  "maxNumberOfParents": 1,

  "renderElitesToWavFiles": false,

  "oneCPPNPerFrequency": true,

  "classifiers": [
    {
      "classConfigurations": [
        {
          "refSetName": "customRef1",
          "featureExtractionEndpoint": "/mfcc-sans0",
          "featureExtractionType": "mfcc-sans0",
          "qualityEvaluationEndpoint": "?k=15&power=8&useAdaptive=true",
          "qualityFromFeatures": true,
          "usingQueryEmbeddings": false, // e.g. for a FAD reference set
          "projectionEndpoint": "/pca", // not in effect when auroraModeConfig is present
          "shouldRetrainProjection": true,
          "projectionRetrainingLinearGapIncrement": 50,
          "shouldCalculateNovelty": false,
          "shouldCalculateSurprise": false,
          "shouldTrackDiversity": false,
          "sampleRate": 16000,
          "mapSelectorBias": "productivity", // one of: 'uniform', 'productivity', 'novelty' or 'surprise': see the "enum" MAP_SELECTOR_BIAS in quality-diversity-search.js
          "eliteRemappingCompetitionCriteria": "score", // one of: 'score', 'novelty' or 'surprise',

          "retrainWithAllDiscoveredFeatures": false // if true, all discovered features are used for retraining the projection, otherwise only the features in the container are used

          // "useNoveltyArchive": true, // wether to use a novelty archive, for intermitent inspiration when retraining unsupervised projections
          // "inspirationRate": 0.2, // the rate at which to draw from the novelty archive, when selecting an individual for mutation
          // "noveltyArchiveSizePercentage": 0.2 // the size of the novelty archive, as a percentage of the population size
        }
      ],
      "classificationDimensions": [100, 100] // number of dimensions for each class
    }
  ],
  "classifierIndex" : 0,
  // "classesAsMaps": true, // otherwise as dimensions, goes in hand with mapsSwitchingCondition:
  // "mapSwitchingCondition": {
  //   // "coverageGradientThreshold": 0.01,
  //   "qdScoreGradientThreshold": 0.01,
  //   "gradientWindowSize": 10
  // },

  "terminationCondition": {
    "numberOfEvals": 300000
  //  or
  // "coverageGradientThreshold": 0.01
  //  or
  //  "qdScoreGradientThreshold": 0.01
  // or
  //  "averageFitnessInMap": 0.1
  // or
  //  "medianFitnessInMap": 0.1
  // or
  //  "percentageOfMapFilledWithFitnessThreshold": {"percentage": x, "minimumCellFitness": x}
  },
  "gradientWindowSize": 10,

  // AURORA-XCon configuration
  "auroraModeConfig": {
    "useContrastiveLearning": true,       // Enable/disable contrastive learning
    "useExtinctionEvents": true,          // Enable/disable extinction events
    "extinctionPeriod": 400,               // Extinction events every N iterations (512/64)*50
    "extinctionProportion": 0.05,         // Preserve this percentage of population
    "projectionRetrainingMode": "linear",  // "fixed" or "linear"
    "projectionRetrainingInterval": 10,   // If fixed: retrain every N iterations
    "projectionRetrainingLinearGapIncrement": 10, // If linear: increment as in existing code
    "tripletMarginMultiplier": 0.5,       // Multiplier for adaptive margin in triplet loss; 2 for 2D
    "useFeaturesDistance": false,         // Whether to use feature distance instead of fitness
    "featuresDistanceMetric": "cosine",   // "cosine" or "euclidean"
    "randomSeed": 42,

    "learningRate": 0.001, 
    "trainingEpochs": 200
  },

  "geneVariationServers": [
    "ws://127.0.0.1:50051",
    "ws://127.0.0.1:50052",
    "ws://127.0.0.1:50053"
  ],
  "geneRenderingServers": [
    "ws://127.0.0.1:60051",
    "ws://127.0.0.1:60052",
    "ws://127.0.0.1:60053"
  ],

  "evaluationFeatureServers": [ // feature extraction
    "ws://127.0.0.1:31051",
    "ws://127.0.0.1:31052",
    "ws://127.0.0.1:31053"
  ],
  "evaluationQualityServers": [ // quality evaluation
    "ws://127.0.0.1:40051",
  // "ws://127.0.0.1:32052",
  // "ws://127.0.0.1:32053"
  ],
  "evaluationProjectionServers": [ // projection
    "ws://127.0.0.1:33051",
    // "ws://127.0.0.1:33052",
    // "ws://127.0.0.1:33053"
  ]
}
